variables:
  AZP_CACHING_TAR: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: 1

trigger:
  branches:
    include:
    - '*'

jobs:
- job: Build
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: DeleteFiles@1
    displayName: 'Remove previous build files'
    inputs:
      contents: |
        $(Build.SourcesDirectory)/coverage/**/*
        src/Songbird.Web/ClientApp/**/*
        artifacts/**/*
        **/*.trx
        **/junit.xml
  - task: NodeTool@0
    displayName: 'Set Node.js version to 14.x'
    inputs:
      versionSpec: '14.x'
  - task: CmdLine@2
    displayName: 'Run yarn'
    inputs:
      script: yarn --frozen-lockfile
      workingDirectory: src/Songbird.Frontend
  - task: CmdLine@2
    displayName: 'Run frontend linting'
    inputs:
      script: |
        yarn lint:js
        yarn lint:hbs
        yarn lint:css
      workingDirectory: src/Songbird.Frontend
      failOnStderr: false
  - task: CmdLine@2
    displayName: 'Test Ember App'
    inputs:
      script: 'node_modules/.bin/ember test || exit 0'
      workingDirectory: src/Songbird.Frontend
      failOnStderr: false
  - task: PublishTestResults@2
    displayName: 'Publish Ember test results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Build.SourcesDirectory)/src/Songbird.Frontend/junit.xml'
      testRunTitle: 'Ember Tests'
      mergeTestResults: true
      failTaskOnFailedTests: true
  - task: CmdLine@2
    displayName: 'Build Ember App'
    inputs:
      script: node_modules/.bin/ember build --environment=production --out ../Songbird.Web/ClientApp
      workingDirectory: src/Songbird.Frontend
  - task: UseDotNet@2
    displayName: 'Install .NET Core'
    inputs:
      packageType: 'sdk'
      version: '5.0.201'
  - task: DotNetCoreCLI@2
    displayName: 'Restore NuGet packages'
    inputs:
      command: 'restore'
      projects: '$(Build.SourcesDirectory)/Songbird.sln'
      feedsToUse: 'config'
      nugetConfigPath: '$(Build.SourcesDirectory)/nuget.config'
      verbosityRestore: 'Minimal'
  - task: DotNetCoreCLI@2
    displayName: 'Run tests'
    inputs:
      command: 'test'
      projects: '**/*.Tests.csproj'
      arguments: '--configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
      publishTestResults: true
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage Report'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
  - task: DotNetCoreCLI@2
    displayName: 'Publish .NET Core App'
    inputs:
      command: 'publish'
      projects: '$(Build.SourcesDirectory)/src/Songbird.Web/Songbird.Web.csproj'
      configuration: 'Release'
      arguments: '-o artifacts --runtime win10-x86'
      zipAfterPublish: false
  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifacts'
    inputs:
      pathtoPublish: 'artifacts/Songbird.Web'
      artifactName: build-artifacts
