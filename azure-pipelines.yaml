variables:
  AZP_CACHING_TAR: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: 1
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

trigger:
  branches:
    include:
    - main

jobs:
- job: Build
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: DeleteFiles@1
    displayName: 'Remove previous build files'
    inputs:
      contents: |
        $(Build.SourcesDirectory)/coverage/**/*
        src/Songbird.Web/ClientApp/**/*
        artifacts/**/*
        **/*.trx
        **/junit.xml
  - task: NodeTool@0
    displayName: 'Set Node.js version to 14.x'
    inputs:
      versionSpec: '14.x'
  - task: Cache@2
    inputs:
      key: '"yarn" | "$(Agent.OS)" | ./src/Songbird.Frontend/yarn.lock'
      restoreKeys: |
          yarn | "$(Agent.OS)"
      path: $(YARN_CACHE_FOLDER)
    displayName: Cache Yarn packages
  - task: CmdLine@2
    displayName: 'Run yarn'
    inputs:
      script: yarn --frozen-lockfile
      workingDirectory: src/Songbird.Frontend
  - task: CmdLine@2
    displayName: 'Run frontend linting'
    inputs:
      script: |
        yarn lint:js
        yarn lint:hbs
        yarn lint:css
      workingDirectory: src/Songbird.Frontend
      failOnStderr: false
  - task: CmdLine@2
    displayName: 'Test Ember App'
    inputs:
      script: 'node_modules/.bin/ember test || exit 0'
      workingDirectory: src/Songbird.Frontend
      failOnStderr: false
  - task: PublishTestResults@2
    displayName: 'Publish Ember test results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Build.SourcesDirectory)/src/Songbird.Frontend/junit.xml'
      testRunTitle: 'Ember Tests'
      mergeTestResults: true
      failTaskOnFailedTests: true
  - task: CmdLine@2
    displayName: 'Build Ember App'
    inputs:
      script: node_modules/.bin/ember build --environment=production --out ../Songbird.Web/ClientApp
      workingDirectory: src/Songbird.Frontend
  - task: UseDotNet@2
    displayName: 'Install .NET Core'
    inputs:
      packageType: 'sdk'
      version: '6.0.100-preview.6.21355.2'
  - task: DotNetCoreCLI@2
    displayName: 'Restore NuGet packages'
    inputs:
      command: 'restore'
      projects: '$(Build.SourcesDirectory)/Songbird.sln'
      feedsToUse: 'config'
      nugetConfigPath: '$(Build.SourcesDirectory)/nuget.config'
      verbosityRestore: 'Minimal'
  - task: DotNetCoreCLI@2
    displayName: 'Run tests'
    inputs:
      command: 'test'
      projects: '**/*.Tests.csproj'
      arguments: '--configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:excludebyfile="**/Migrations/*.cs"'
      publishTestResults: true
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage Report'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
  - task: DotNetCoreCLI@2
    displayName: 'Publish .NET Core App'
    inputs:
      command: 'publish'
      projects: '$(Build.SourcesDirectory)/src/Songbird.Web/Songbird.Web.csproj'
      configuration: 'Release'
      arguments: '--runtime win10-x86'
      zipAfterPublish: true
  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifacts'
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/src/Songbird.Web/bin/Debug/net6.0/win10-x86/publish.zip'
      artifactName: build-artifacts
