name: 'Build and deploy application'

on:
  push:
    branches:
      - develop
      - main
      - 'release/**'
      - 'feature/**'
      - 'hotfix/**'
    paths-ignore:
      - 'README.md'
      - 'docs/*'
      - 'scripts/*'
      - '.vscode/*'
  pull_request:

permissions:
  checks: write
  contents: write
  pull-requests: write
  actions: read

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  NUGET_CERT_REVOCATION_MODE: offline
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  frontend-test:
    name: Frontend tests
    if: ${{ github.actor != 'dependabot[bot]' }}

    strategy:
      matrix:
        os: [
          ubuntu-latest,
          windows-latest
        ]
    runs-on: ${{ matrix.os }}

    steps:

    # This is needed to pass linting
    - name: Set GIT to use CRLF
      run: |
        git config --global core.autocrlf true
        git config --global core.eol crlf

    - name: Checkout sources
      uses: actions/checkout@v3

    - name: Setup Node.js environment
      uses: actions/setup-node@v3.5.1
      with:
        node-version: 18.x

    - name: Run Yarn
      run: yarn --immutable --immutable-cache
      working-directory: ./src/Songbird.Frontend/

    - name: Run frontend linting
      run: |
        yarn lint:js
        yarn lint:css
      working-directory: ./src/Songbird.Frontend/

    - name: Run frontend tests
      run: yarn test:ember || exit 0
      working-directory: ./src/Songbird.Frontend/

    - name: Upload test results
      uses: actions/upload-artifact@v3.1.1
      if: matrix.os == 'ubuntu-latest'
      with:
        name: frontend-test-results
        path: |
          ./src/Songbird.Frontend/junit.xml
          ./src/Songbird.Frontend/coverage/cobertura-coverage.xml

  net-test:
    name: .NET tests
    if: ${{ github.actor != 'dependabot[bot]' }}

    strategy:
      matrix:
        os: [
          ubuntu-latest,
          windows-latest
        ]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout sources
      uses: actions/checkout@v3

    - name: Cache NuGet packages on Windows
      uses: actions/cache@v3
      if: matrix.os == 'windows-latest'
      with:
        path: ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install .NET 7
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
        dotnet-quality: ga

    - name: Restore NuGet packages
      run: dotnet restore --verbosity minimal

    - name: Run .NET tests
      run: dotnet test --configuration Release

    - name: Upload test results
      uses: actions/upload-artifact@v3.1.1
      if: matrix.os == 'ubuntu-latest'
      with:
        name: net-test-results
        path: |
          ./**/*.trx
          ./**/coverage.cobertura.xml

  frontend-build:
    name: Frontend build
    runs-on: ubuntu-latest
    needs: [ frontend-test ]

    steps:
    - name: Checkout sources
      uses: actions/checkout@v3

    - name: Setup Node.js environment
      uses: actions/setup-node@v3.5.1
      with:
        node-version: 18.x

    - name: Run Yarn
      run: yarn --immutable --immutable-cache
      working-directory: ./src/Songbird.Frontend/

    - name: Build Frontend
      run: yarn build
      working-directory: ./src/Songbird.Frontend/

    - name: Upload artifacts
      uses: actions/upload-artifact@v3.1.1
      with:
        name: frontend-artifacts
        path: ./src/Songbird.Web/wwwroot/

  test-and-coverage-results:
    name: Publish test and coverage results
    runs-on: ubuntu-latest
    needs: [ net-test, frontend-test ]

    steps:
    # While we don't use sources directly in this job the test reporter wants to check
    # some files through git so we need the sources.
    - name: Checkout sources
      uses: actions/checkout@v3

    - name: Download frontend tests results
      uses: actions/download-artifact@v3.0.1
      with:
        name: frontend-test-results
        path: ./

    - name: Download .NET tests results
      uses: actions/download-artifact@v3.0.1
      with:
        name: net-test-results
        path: ./

    - name: Publish frontend tests
      uses: dorny/test-reporter@v1
      with:
        name: üß™ Frontend test results
        path: ./**/junit.xml
        reporter: jest-junit

    - name: Publish .NET tests
      uses: dorny/test-reporter@v1
      with:
        name: üß™ .NET test results
        path: ./**/*.trx
        reporter: dotnet-trx

    - name: Create history folder
      run: mkdir ./coverage-history
      working-directory: ./

    - name: Download historial coverage
      uses: dawidd6/action-download-artifact@v2.24.0
      with:
        workflow_conclusion: success
        branch: ${{ github.head_ref }}
        name: coverage-history
        path: ./coverage-history
        check_artifacts:  true
        search_artifacts: true
        if_no_artifact_found: ignore

    - name: Install .NET 7
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
        dotnet-quality: ga

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.11
      with:
        reports: '../**/{coverage.cobertura,cobertura-coverage}.xml'
        targetdir: 'coverage-report'
        historydir: 'coverage-history'
        reporttypes: 'Html;MarkdownSummary;MarkdownDeltaSummary;Cobertura'
        assemblyfilters: '-xunit*'
        verbosity: 'Info'

    - name: Upload coverage report
      uses: actions/upload-artifact@v3.1.1
      with:
        name: coverage-report
        path: coverage-report

    - name: Upload to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage-report/Cobertura.xml

    - name: Upload coverage history
      uses: actions/upload-artifact@v3.1.1
      with:
        name: coverage-history
        path: coverage-history

    - name: Publish code coverage summary to run
      uses: LouisBrunner/checks-action@v1.5.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        conclusion: ${{ job.status }}
        name: üìù Code coverage
        output: "{\"summary\":\"Summary of code coverage. For more detailed information, download the full artifact from the run.\"}"
        output_text_description_file: ./coverage-report/Summary.md

    - name: Publish code coverage summary to pull request
      uses: marocchino/sticky-pull-request-comment@v2
      #if: github.event_name == 'pull_request'
      if: ${{ false }} # Disabling this one, we'll look into getting a smaller summary instead some day
      with:
        path: coverage-report/Summary.md

  net-build:
    name: .NET build
    runs-on: ubuntu-latest
    needs: [ net-test, frontend-build ]

    steps:
    - name: Checkout sources
      uses: actions/checkout@v3

    - name: Install .NET 7
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
        dotnet-quality: ga

    - name: Restore NuGet packages
      run: dotnet restore --verbosity minimal

    - name: Download frontend artifacts
      uses: actions/download-artifact@v3.0.1
      with:
        name: frontend-artifacts
        path: ./src/Songbird.Web/ClientApp/

    - name: Publish application
      run: dotnet publish -o ./artifacts -c Release ./src/Songbird.Web/Songbird.Web.csproj
      working-directory: ./

    - name: Remove unused runtimes
      run: |
        rm -rf ./artifacts/runtimes/linux*
        rm -rf ./artifacts/runtimes/osx*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3.1.1
      with:
        name: web-artifacts
        path: ./artifacts/
        if-no-files-found: error

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    #needs: [ deploy-dev, deploy-production ]
    if: ${{ github.actor != 'dependabot[bot]' }} && always()

    steps:
    - uses: geekyeggo/delete-artifact@v2
      with:
          name: |
              web-artifacts
              frontend-artifacts
