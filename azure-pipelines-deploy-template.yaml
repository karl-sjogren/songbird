parameters:
  - name: environments
    type: object
    default: []

stages:
  - ${{ each environment in parameters.environments }}:
    - stage: Deploy_${{ environment.branch }}
      dependsOn: build
      displayName: Deploy branch ${{ environment.branch }} to environment ${{ environment.name }}
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/${{ environment.branch }}'))
      jobs:
      - deployment: DeployJob
        pool:
          vmImage: ubuntu-latest
        displayName: Deploy
        environment: ${{ environment.name }}
        strategy:
            runOnce:
              deploy:
                steps:
                - download: none

                - task: DownloadPipelineArtifact@2
                  displayName: Download build artifacts
                  inputs:
                    artifact: build-artifacts
                    path: '$(System.DefaultWorkingDirectory)/build-artifacts'

                - task: AzureWebApp@1
                  displayName: 'Deploy Azure App Service'
                  inputs:
                    azureSubscription: '${{ environment.subscription }}'
                    appType: webAppLinux
                    appName: '${{ environment.appName }}'
                    deployToSlotOrASE: true
                    deploymentMethod: runFromPackage
                    ResourceGroupName: 'songbird'
                    SlotName: deploy
                    package: '$(System.DefaultWorkingDirectory)/build-artifacts/publish.zip'

              routeTraffic:
                steps:
                - task: DownloadPipelineArtifact@2
                  displayName: Download migration artifacts
                  inputs:
                    artifact: migration-artifacts
                    path: '$(System.DefaultWorkingDirectory)/migration-artifacts'

                - task: AzureAppServiceManage@0
                  displayName: 'Start deployment slot'
                  inputs:
                    azureSubscription: '${{ environment.subscription }}'
                    Action: 'Start Azure App Service'
                    WebAppName: '${{ environment.appName }}'
                    SpecifySlotOrASE: true
                    ResourceGroupName: 'songbird'
                    Slot: deploy

                - task: CmdLine@2
                  displayName: 'Apply migrations'
                  inputs:
                    script:
                      chmod +x ./efbundle
                      ./efbundle --connection "${{ environment.connectionString }}"
                    workingDirectory: '$(System.DefaultWorkingDirectory)/migration-artifacts'

                - task: AzureAppServiceManage@0
                  displayName: 'Swap to deployment slot'
                  inputs:
                    azureSubscription: '${{ environment.subscription }}'
                    Action: 'Swap Slots'
                    WebAppName: '${{ environment.appName }}'
                    ResourceGroupName: 'songbird'
                    SourceSlot: deploy

                - task: AzureAppServiceManage@0
                  displayName: 'Stop deployment slot'
                  inputs:
                    azureSubscription: '${{ environment.subscription }}'
                    Action: 'Stop Azure App Service'
                    WebAppName: '${{ environment.appName }}'
                    SpecifySlotOrASE: true
                    ResourceGroupName: 'songbird'
                    Slot: deploy

              postRouteTraffic:
                steps:
                  - bash: |
                      status=`curl --silent --head ${{ environment.smokeTestUrl }} | head -1 | cut -f 2 -d' '`

                      if [ "$status" != "200" ]
                      then
                          echo "response status should be 200, was '$status' for url '${{ environment.smokeTestUrl }}'"
                          exit 1
                      fi
                    displayName: 'Smoke test'

              on:
                failure:
                  steps:
                    - task: AzureAppServiceManage@0
                      displayName: 'Start deployment slot for rollback'
                      inputs:
                        azureSubscription: '${{ environment.subscription }}'
                        Action: 'Start Azure App Service'
                        WebAppName: '${{ environment.appName }}'
                        SpecifySlotOrASE: true
                        ResourceGroupName: 'songbird'
                        Slot: deploy

                    - task: AzureAppServiceManage@0
                      displayName: 'Swap to deployment slot with previous release'
                      inputs:
                        azureSubscription: '${{ environment.subscription }}'
                        Action: 'Swap Slots'
                        WebAppName: '${{ environment.appName }}'
                        ResourceGroupName: 'songbird'
                        SourceSlot: deploy

                    - task: AzureAppServiceManage@0
                      displayName: 'Stop deployment slot again'
                      inputs:
                        azureSubscription: '${{ environment.subscription }}'
                        Action: 'Stop Azure App Service'
                        WebAppName: '${{ environment.appName }}'
                        SpecifySlotOrASE: true
                        ResourceGroupName: 'songbird'
                        Slot: deploy
                #success:
                  #steps:
