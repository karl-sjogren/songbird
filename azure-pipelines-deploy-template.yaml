parameters:
  - name: environments
    type: object
    default: []

stages:
  - ${{ each environment in parameters.environments }}:
    - stage: Deploy_${{ environment.branch }}
      dependsOn: build
      displayName: Deploy branch ${{ environment.branch }} to environment ${{ environment.name }}
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/${{ environment.branch }}'))
      jobs:
      - deployment:
        pool:
          vmImage: ubuntu-latest
        displayName: Deploy
        environment: ${{ environment.name }}
        strategy:
            runOnce:
              deploy:
                steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy Azure App Service'
                  inputs:
                    azureSubscription: '${{ environment.subscription }}'
                    appType: webAppLinux
                    appName: '${{ environment.appName }}'
                    deployToSlotOrASE: true
                    ResourceGroupName: 'songbird'
                    SlotName: deploy
                    packageForLinux: '$(System.DefaultWorkingDirectory)/_karl-sjogren.songbird/build-artifacts/publish.zip'
              routeTraffic:
                steps:
                - task: AzureAppServiceManage@0
                  displayName: 'Start deploytment slot'
                  inputs:
                    azureSubscription: '${{ environment.subscription }}'
                    Action: 'Start Azure App Service'
                    appName: '${{ environment.appName }}'
                    SpecifySlotOrASE: true
                    ResourceGroupName: 'songbird'
                    Slot: deploy

                - task: AzureAppServiceManage@0
                  displayName: 'Swap to deployment slot'
                  inputs:
                    azureSubscription: '${{ environment.subscription }}'
                    Action: 'Swap Slots'
                    WebAppName: '${{ environment.appName }}'
                    ResourceGroupName: 'songbird'
                    SourceSlot: deploy

                - task: AzureAppServiceManage@0
                  displayName: 'Stop deploytment slot'
                  inputs:
                    azureSubscription: '${{ environment.subscription }}'
                    Action: 'Stop Azure App Service'
                    WebAppName: '${{ environment.appName }}'
                    SpecifySlotOrASE: true
                    ResourceGroupName: 'songbird'
                    Slot: deploy
              #on:
                #failure:
                  #steps:
                #success:
                  #steps:
